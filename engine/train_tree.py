import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier, export_text, plot_tree
from sklearn.metrics import classification_report
import matplotlib.pyplot as plt

# ğŸ“¥ Charger les donnÃ©es
df = pd.read_csv("features_preview.csv")

# ğŸ§¹ SÃ©parer les features et la cible
X = df.drop(columns=["match"])
y = df["match"]

# ğŸ”€ DÃ©couper en train/test
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# ğŸŒ³ CrÃ©er et entraÃ®ner le modÃ¨le
model = DecisionTreeClassifier(max_depth=5, random_state=42)
model.fit(X_train, y_train)

# ğŸ§  Afficher les rÃ¨gles apprises (texte)
print("\nğŸŒ³ RÃ¨gles de l'arbre de dÃ©cision :\n")
print(export_text(model, feature_names=list(X.columns)))

# ğŸ“ˆ Ã‰valuation
y_pred = model.predict(X_test)
print("\nğŸ“Š Rapport de performance :\n")
print(classification_report(y_test, y_pred))

# ğŸ“Š Visualisation graphique (facultatif)
plt.figure(figsize=(16, 8))
plot_tree(model, feature_names=X.columns, class_names=["NO MATCH", "MATCH"], filled=True)
plt.title("Arbre de dÃ©cision â€“ Picser")
plt.savefig("tree_rules.png")
print("\nğŸ“‚ Arbre visuel exportÃ© â†’ tree_rules.png")
print(f"ğŸ“Š Taille du dataset total : {len(df)}")
print(f"ğŸ”¬ Taille du jeu de test : {len(X_test)}")
plt.show()
